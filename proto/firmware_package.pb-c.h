/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: proto/firmware_package.proto */

#ifndef PROTOBUF_C_proto_2ffirmware_5fpackage_2eproto__INCLUDED
#define PROTOBUF_C_proto_2ffirmware_5fpackage_2eproto__INCLUDED

#include <protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _FirmwareUpgrade__SrecLine FirmwareUpgrade__SrecLine;
typedef struct _FirmwareUpgrade__SendPacket FirmwareUpgrade__SendPacket;
typedef struct _FirmwareUpgrade__Acknowledge FirmwareUpgrade__Acknowledge;
typedef struct _FirmwareUpgrade__Reject FirmwareUpgrade__Reject;
typedef struct _FirmwareUpgrade__Ready FirmwareUpgrade__Ready;


/* --- enums --- */


/* --- messages --- */

struct  _FirmwareUpgrade__SrecLine
{
  ProtobufCMessage base;
  char *record_type;
  char *byte_count;
  char *address;
  char *data;
  char *checksum;
};
#define FIRMWARE_UPGRADE__SREC_LINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&firmware_upgrade__srec_line__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _FirmwareUpgrade__SendPacket
{
  ProtobufCMessage base;
  int32_t sent_checksum;
  FirmwareUpgrade__SrecLine *line;
  ProtobufCBinaryData message_checksum;
};
#define FIRMWARE_UPGRADE__SEND_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&firmware_upgrade__send_packet__descriptor) \
    , 0, NULL, {0,NULL} }


struct  _FirmwareUpgrade__Acknowledge
{
  ProtobufCMessage base;
  ProtobufCBinaryData acknowledge;
};
#define FIRMWARE_UPGRADE__ACKNOWLEDGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&firmware_upgrade__acknowledge__descriptor) \
    , {0,NULL} }


struct  _FirmwareUpgrade__Reject
{
  ProtobufCMessage base;
  ProtobufCBinaryData reject;
};
#define FIRMWARE_UPGRADE__REJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&firmware_upgrade__reject__descriptor) \
    , {0,NULL} }


struct  _FirmwareUpgrade__Ready
{
  ProtobufCMessage base;
  ProtobufCBinaryData ready;
};
#define FIRMWARE_UPGRADE__READY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&firmware_upgrade__ready__descriptor) \
    , {0,NULL} }


/* FirmwareUpgrade__SrecLine methods */
void   firmware_upgrade__srec_line__init
                     (FirmwareUpgrade__SrecLine         *message);
size_t firmware_upgrade__srec_line__get_packed_size
                     (const FirmwareUpgrade__SrecLine   *message);
size_t firmware_upgrade__srec_line__pack
                     (const FirmwareUpgrade__SrecLine   *message,
                      uint8_t             *out);
size_t firmware_upgrade__srec_line__pack_to_buffer
                     (const FirmwareUpgrade__SrecLine   *message,
                      ProtobufCBuffer     *buffer);
FirmwareUpgrade__SrecLine *
       firmware_upgrade__srec_line__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   firmware_upgrade__srec_line__free_unpacked
                     (FirmwareUpgrade__SrecLine *message,
                      ProtobufCAllocator *allocator);
/* FirmwareUpgrade__SendPacket methods */
void   firmware_upgrade__send_packet__init
                     (FirmwareUpgrade__SendPacket         *message);
size_t firmware_upgrade__send_packet__get_packed_size
                     (const FirmwareUpgrade__SendPacket   *message);
size_t firmware_upgrade__send_packet__pack
                     (const FirmwareUpgrade__SendPacket   *message,
                      uint8_t             *out);
size_t firmware_upgrade__send_packet__pack_to_buffer
                     (const FirmwareUpgrade__SendPacket   *message,
                      ProtobufCBuffer     *buffer);
FirmwareUpgrade__SendPacket *
       firmware_upgrade__send_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   firmware_upgrade__send_packet__free_unpacked
                     (FirmwareUpgrade__SendPacket *message,
                      ProtobufCAllocator *allocator);
/* FirmwareUpgrade__Acknowledge methods */
void   firmware_upgrade__acknowledge__init
                     (FirmwareUpgrade__Acknowledge         *message);
size_t firmware_upgrade__acknowledge__get_packed_size
                     (const FirmwareUpgrade__Acknowledge   *message);
size_t firmware_upgrade__acknowledge__pack
                     (const FirmwareUpgrade__Acknowledge   *message,
                      uint8_t             *out);
size_t firmware_upgrade__acknowledge__pack_to_buffer
                     (const FirmwareUpgrade__Acknowledge   *message,
                      ProtobufCBuffer     *buffer);
FirmwareUpgrade__Acknowledge *
       firmware_upgrade__acknowledge__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   firmware_upgrade__acknowledge__free_unpacked
                     (FirmwareUpgrade__Acknowledge *message,
                      ProtobufCAllocator *allocator);
/* FirmwareUpgrade__Reject methods */
void   firmware_upgrade__reject__init
                     (FirmwareUpgrade__Reject         *message);
size_t firmware_upgrade__reject__get_packed_size
                     (const FirmwareUpgrade__Reject   *message);
size_t firmware_upgrade__reject__pack
                     (const FirmwareUpgrade__Reject   *message,
                      uint8_t             *out);
size_t firmware_upgrade__reject__pack_to_buffer
                     (const FirmwareUpgrade__Reject   *message,
                      ProtobufCBuffer     *buffer);
FirmwareUpgrade__Reject *
       firmware_upgrade__reject__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   firmware_upgrade__reject__free_unpacked
                     (FirmwareUpgrade__Reject *message,
                      ProtobufCAllocator *allocator);
/* FirmwareUpgrade__Ready methods */
void   firmware_upgrade__ready__init
                     (FirmwareUpgrade__Ready         *message);
size_t firmware_upgrade__ready__get_packed_size
                     (const FirmwareUpgrade__Ready   *message);
size_t firmware_upgrade__ready__pack
                     (const FirmwareUpgrade__Ready   *message,
                      uint8_t             *out);
size_t firmware_upgrade__ready__pack_to_buffer
                     (const FirmwareUpgrade__Ready   *message,
                      ProtobufCBuffer     *buffer);
FirmwareUpgrade__Ready *
       firmware_upgrade__ready__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   firmware_upgrade__ready__free_unpacked
                     (FirmwareUpgrade__Ready *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*FirmwareUpgrade__SrecLine_Closure)
                 (const FirmwareUpgrade__SrecLine *message,
                  void *closure_data);
typedef void (*FirmwareUpgrade__SendPacket_Closure)
                 (const FirmwareUpgrade__SendPacket *message,
                  void *closure_data);
typedef void (*FirmwareUpgrade__Acknowledge_Closure)
                 (const FirmwareUpgrade__Acknowledge *message,
                  void *closure_data);
typedef void (*FirmwareUpgrade__Reject_Closure)
                 (const FirmwareUpgrade__Reject *message,
                  void *closure_data);
typedef void (*FirmwareUpgrade__Ready_Closure)
                 (const FirmwareUpgrade__Ready *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor firmware_upgrade__srec_line__descriptor;
extern const ProtobufCMessageDescriptor firmware_upgrade__send_packet__descriptor;
extern const ProtobufCMessageDescriptor firmware_upgrade__acknowledge__descriptor;
extern const ProtobufCMessageDescriptor firmware_upgrade__reject__descriptor;
extern const ProtobufCMessageDescriptor firmware_upgrade__ready__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_proto_2ffirmware_5fpackage_2eproto__INCLUDED */
