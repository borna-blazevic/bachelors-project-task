/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: firmware_package.proto */

#ifndef PROTOBUF_C_firmware_5fpackage_2eproto__INCLUDED
#define PROTOBUF_C_firmware_5fpackage_2eproto__INCLUDED

#include <protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _FirmwareUpgrade__SrecLine FirmwareUpgrade__SrecLine;
typedef struct _FirmwareUpgrade__FirmwarePacket FirmwareUpgrade__FirmwarePacket;
typedef struct _FirmwareUpgrade__Status FirmwareUpgrade__Status;


/* --- enums --- */

typedef enum _FirmwareUpgrade__Status__StatusEnum {
  FIRMWARE_UPGRADE__STATUS__STATUS_ENUM__UNUSED = 0,
  FIRMWARE_UPGRADE__STATUS__STATUS_ENUM__READY = 1,
  FIRMWARE_UPGRADE__STATUS__STATUS_ENUM__ACK = 2,
  FIRMWARE_UPGRADE__STATUS__STATUS_ENUM__REJECT = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FIRMWARE_UPGRADE__STATUS__STATUS_ENUM)
} FirmwareUpgrade__Status__StatusEnum;

/* --- messages --- */

struct  _FirmwareUpgrade__SrecLine
{
  ProtobufCMessage base;
  char *record_type;
  uint32_t byte_count;
  uint32_t address;
  ProtobufCBinaryData data;
  uint32_t checksum;
};
#define FIRMWARE_UPGRADE__SREC_LINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&firmware_upgrade__srec_line__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, {0,NULL}, 0 }


struct  _FirmwareUpgrade__FirmwarePacket
{
  ProtobufCMessage base;
  uint32_t checksum;
  FirmwareUpgrade__SrecLine *line;
};
#define FIRMWARE_UPGRADE__FIRMWARE_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&firmware_upgrade__firmware_packet__descriptor) \
    , 0, NULL }


struct  _FirmwareUpgrade__Status
{
  ProtobufCMessage base;
  FirmwareUpgrade__Status__StatusEnum status;
};
#define FIRMWARE_UPGRADE__STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&firmware_upgrade__status__descriptor) \
    , FIRMWARE_UPGRADE__STATUS__STATUS_ENUM__UNUSED }


/* FirmwareUpgrade__SrecLine methods */
void   firmware_upgrade__srec_line__init
                     (FirmwareUpgrade__SrecLine         *message);
size_t firmware_upgrade__srec_line__get_packed_size
                     (const FirmwareUpgrade__SrecLine   *message);
size_t firmware_upgrade__srec_line__pack
                     (const FirmwareUpgrade__SrecLine   *message,
                      uint8_t             *out);
size_t firmware_upgrade__srec_line__pack_to_buffer
                     (const FirmwareUpgrade__SrecLine   *message,
                      ProtobufCBuffer     *buffer);
FirmwareUpgrade__SrecLine *
       firmware_upgrade__srec_line__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   firmware_upgrade__srec_line__free_unpacked
                     (FirmwareUpgrade__SrecLine *message,
                      ProtobufCAllocator *allocator);
/* FirmwareUpgrade__FirmwarePacket methods */
void   firmware_upgrade__firmware_packet__init
                     (FirmwareUpgrade__FirmwarePacket         *message);
size_t firmware_upgrade__firmware_packet__get_packed_size
                     (const FirmwareUpgrade__FirmwarePacket   *message);
size_t firmware_upgrade__firmware_packet__pack
                     (const FirmwareUpgrade__FirmwarePacket   *message,
                      uint8_t             *out);
size_t firmware_upgrade__firmware_packet__pack_to_buffer
                     (const FirmwareUpgrade__FirmwarePacket   *message,
                      ProtobufCBuffer     *buffer);
FirmwareUpgrade__FirmwarePacket *
       firmware_upgrade__firmware_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   firmware_upgrade__firmware_packet__free_unpacked
                     (FirmwareUpgrade__FirmwarePacket *message,
                      ProtobufCAllocator *allocator);
/* FirmwareUpgrade__Status methods */
void   firmware_upgrade__status__init
                     (FirmwareUpgrade__Status         *message);
size_t firmware_upgrade__status__get_packed_size
                     (const FirmwareUpgrade__Status   *message);
size_t firmware_upgrade__status__pack
                     (const FirmwareUpgrade__Status   *message,
                      uint8_t             *out);
size_t firmware_upgrade__status__pack_to_buffer
                     (const FirmwareUpgrade__Status   *message,
                      ProtobufCBuffer     *buffer);
FirmwareUpgrade__Status *
       firmware_upgrade__status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   firmware_upgrade__status__free_unpacked
                     (FirmwareUpgrade__Status *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*FirmwareUpgrade__SrecLine_Closure)
                 (const FirmwareUpgrade__SrecLine *message,
                  void *closure_data);
typedef void (*FirmwareUpgrade__FirmwarePacket_Closure)
                 (const FirmwareUpgrade__FirmwarePacket *message,
                  void *closure_data);
typedef void (*FirmwareUpgrade__Status_Closure)
                 (const FirmwareUpgrade__Status *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor firmware_upgrade__srec_line__descriptor;
extern const ProtobufCMessageDescriptor firmware_upgrade__firmware_packet__descriptor;
extern const ProtobufCMessageDescriptor firmware_upgrade__status__descriptor;
extern const ProtobufCEnumDescriptor    firmware_upgrade__status__status_enum__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_firmware_5fpackage_2eproto__INCLUDED */
